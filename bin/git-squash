#!/bin/bash

# Usage: strip_flags <...all_arguments>
# echo $CURRENT_CLEAN_ARGUMENTS
CURRENT_CLEAN_ARGUMENTS=""
function strip_flags() {
  CURRENT_CLEAN_ARGUMENTS=""
  for argument in "$@"; do
    if [[ "$argument" =~ ^- ]]; then
      continue
    fi
    CURRENT_CLEAN_ARGUMENTS+="$argument "
  done
}

# Usage: check_contains_flag <all_arguments> <flag_long_name> <flag_shorthand>
# Example: check_contains_flag "$*" 'help' 'h'
function check_contains_flag() {
  if [[ "$1" =~ --$2 ]] || [[ "$1" =~ -$3 ]]; then
    echo 'true'
  fi
}

# Usage: extract_flag_value <all_arguments> <flag_name>
function extract_flag_value() {
  echo "$1" | grep -Eo "$2\=[^ ]+" | grep -Eo '[^ \=]+$'
}

function git_current_branch() {
  git branch | grep '\*' | cut -d ' ' -f2
}

function git_backup() {
  git checkout "$1" && git checkout -b "$2" && git checkout "$1"
}

function git_commit() {
  if [ -n "$1" ]; then
    git add --all :/ && git commit -m "$1"
  else
    git add --all :/ && git commit
  fi
}

function git_rebase() {
  GIT_SEQUENCE_EDITOR="sed -i -e '1 ! s/pick/squash/g'" git rebase -i --autostash "$1"
}

if ! git -C "$(pwd)" rev-parse --is-inside-work-tree &> /dev/null; then
  echo "$(pwd) is not a git repository."
  exit 1
fi

if [ -n "$(check_contains_flag "$*" "help" "h")" ]; then
  echo """Usage: git squash [--help|-h] [--backup=<branch_name>] [--backup] [--reset|-r] [--base=<base_branch>] <commit_message>

Arguments
  commit_message    The commit message to use when commiting the squashed commit

Flags
  --base            Branch that you eventually intend on merging into (default: master)
  --backup          Back up the branch before squashing to '[target_branch]-backup'. --backup accepts a backup branch name.
  --reset|-r        Squashes without first updating the branch. By default we use a rebase which updates the branch before squashing.
  --help|-h         Print this help message"""
  exit 0
fi

strip_flags $*
commit_message="$CURRENT_CLEAN_ARGUMENTS"
target_branch="$(git_current_branch)"

if [ -n "$(extract_flag_value "$*" "base")" ]; then
  base_branch="$(extract_flag_value "$*" "base")"
else
  base_branch="master"
fi

if [ -n "$(extract_flag_value "$*" "backup")" ]; then
  backup_branch="$(extract_flag_value "$*" "backup")"
elif [ -n "$(check_contains_flag "$*" "backup" "backup")" ]; then
  backup_branch="$target_branch-backup"
fi

if [ "$base_branch" == "$target_branch" ]; then
  echo "Base branch $base_branch can't be the same as the target branch $target_branch."
  exit 1
fi

if [ -n "$backup_branch" ]; then
  if ! git_backup "$target_branch" "$backup_branch"; then
    echo "Backing up $target_branch to $backup_branch failed."
    exit 1
  fi
fi

if [ -z "$(check_contains_flag "$*" "reset" "r")" ]; then
  if [ -z "$commit_message" ]; then
    if ! git_rebase "$base_branch"; then
      exit 1
    fi
    exit 0
  else
    if ! GIT_EDITOR="sed -i -e '2 s/^#/$commit_message\'$'\n&/g'" git_rebase "$base_branch"; then
      exit 1
    fi
    exit 0
  fi
fi

if git merge-base "$base_branch" "$target_branch" &> /dev/null; then
  squash_from_commit="$(git merge-base "$base_branch" "$target_branch")"
else
  echo "Error finding commit to squash from"
  exit 1
fi

if ! git reset "$squash_from_commit"; then
  echo "Squashing $target_branch failed. Tried to use commit hash $squash_from_commit."
  exit 1
fi

if ! git_commit "$commit_message"; then
  echo "'git reset' worked but failed to create a new squash commit. Please manually run 'git add --all && git commit'."
  exit 1
fi