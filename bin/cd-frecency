#!/bin/bash

DOTFILES_DIRECTORY=$(dirname "$(dirname "$0")")
HISTORY_PATH="$DOTFILES_DIRECTORY/.cd_frecency_history"
VERBOSE=''
CURRENT_POINTS=0
CURRENT_TIMESTAMPS=''
CURRENT_CLEAN_ARGUMENTS=()

escape_backslashes() {
  echo "$1" | sed 's/\//\\\//g'
}

check_contains_flag() {
  if [[ "$1" =~ --$2 ]] || [[ "$1" =~ -$3 ]]; then
    echo 'true'
  fi
}

strip_flags() {
  CURRENT_CLEAN_ARGUMENTS=()
  for argument in "$@"; do
    if [[ "$argument" =~ ^- ]]; then
      continue
    fi
    CURRENT_CLEAN_ARGUMENTS+=("$argument")
  done
}

replace_timestamps_for_entry() {
  local entries clean_entry_path new_timestamps
  entries="$1"
  clean_entry_path="$(escape_backslashes "$2")"
  new_timestamps="$3"
  echo "$entries" | sed -E "s/($clean_entry_path:).+/\1$new_timestamps/"
}

add_to_history() {
  local entry_path entries now_unix

  entries="$1"
  entry_path="$2"
  now_unix="$(date +%s)"

  if echo "$entries" | grep -q "$entry_path:"; then
    echo "${entries//$entry_path:/$entry_path:$now_unix,}"
  else
    printf "%s\n%s:%s,\n" "$entries" "$entry_path" "$now_unix"
  fi
}

remove_from_history() {
  local entries clean_entry_path
  entries="$1"
  clean_entry_path="$(escape_backslashes "$2")"
  echo "$entries" | sed -E "s/$clean_entry_path:.+//" | grep -Eo '.+'
}

# Usage: get_frecency_points <comma_seperated_timestamps_string> <now_unix_timestamp>
get_frecency_points() {
  local timestamps min_ms hour_ms now_unix points new_timestamps timestamp_entries

  min_ms=60
  hour_ms=3600
  day_ms=86400
  now_unix="$2"
  points=0
  timestamps="$1"
  new_timestamps="$timestamps"
  timestamp_entries="$(echo "$timestamps" | grep -Eo '[^,]+')"

  if [ -n "$VERBOSE" ]; then
    printf "now: %s\ntimestamps: %s\n\n" "$now_unix" "$timestamps"
  fi

  while IFS= read -r timestamp; do
    if [[ $timestamp > $((now_unix-$((min_ms*5)))) ]]; then
      points=$((points+4))
      if [ -n "$VERBOSE" ]; then
        echo "- '$timestamp' was last 5 min"
      fi
    elif [[ $timestamp > $((now_unix-hour_ms)) ]]; then
      points=$((points+3))
      if [ -n "$VERBOSE" ]; then
        echo "- '$timestamp' was last hour"
      fi
    elif [[ $timestamp > $((now_unix-day_ms)) ]]; then
      points=$((points+2))
      if [ -n "$VERBOSE" ]; then
        echo "- '$timestamp' was last day"
      fi
    elif [[ $timestamp > $((now_unix-$((day_ms*7)))) ]]; then
      points=$((points+1))
      if [ -n "$VERBOSE" ]; then
        echo "- '$timestamp' was last week"
      fi
    else
      new_timestamps="${timestamps//"$timestamp,"/""}"
      if [ -n "$VERBOSE" ]; then
        echo "- '$timestamp' is outdated, removing from string..."
      fi
    fi
  done < <(echo "$timestamp_entries")

  CURRENT_TIMESTAMPS="$new_timestamps"
  CURRENT_POINTS=$points

  if [ -n "$VERBOSE" ]; then
    printf "\npoints: %s" "$points"
  fi
}

to_lower_case() {
  echo "$1" | awk '{print tolower($0)}'
}

if [ ! -f "$HISTORY_PATH" ]; then
  touch "$HISTORY_PATH"
fi

# shellcheck disable=SC2086,SC2048
strip_flags $*
input_path="${CURRENT_CLEAN_ARGUMENTS[0]}"

if [ -n "$(check_contains_flag "$*" 'help' 'h')" ] || [ -z "$input_path" ]; then
  echo '''
USAGE
cd-frecency <path> [--verbose|-v] [--help|-h]

DESCRIPTION
Prints suggestion for directory to change to using frecency

ARGUMENTS
path                            the path you’d like to move to. if it doesn’t exist we’ll
                                use this to search through your history and will determine
                                where to move to using frecency.

FLAGS
--verbose|-v                    prints debug data
--help|-h                       prints this help message

EXAMPLE
1. Build up your history
    cd-frecency ~/Desktop
    cd-frecency ~/your/projects
    cd-frecency client

2. Now when you input a path that doesn’t exist we’ll search through your history
   using frecency to determine where to move to. E.g. `cd-frecency pro` would print `~/your/projects`.

Interested in learning more about how this works? Try running the above with the --verbose flag.

USING THIS AS YOUR CD
1. In your ~/.zshrc:

  which d &> /dev/null && unset -f d
  d() {
    local output exit_code
    output="$(cd-frecency $*)"
    exit_code=$?
    if [ $exit_code -gt 0 ]; then
      echo $output
      return $exit_code
    fi
    cd $output
  }

2. Use it
  d -h

ISN’T THIS THE SAME AS GITHUB.COM/RUPA/Z?
Yes, it was fun to write.
'''
  exit 1
fi

if [ -n "$(check_contains_flag "$*" 'verbose' 'v')" ]; then
  VERBOSE='true'
else
  VERBOSE=''
fi

entries="$(cat "$HISTORY_PATH")"

if [ -d "$input_path" ]; then
  cd "$input_path"
  add_to_history "$entries" "$(pwd)" > "$HISTORY_PATH"
  echo "$input_path"
  exit 0
fi

most_points_count=0
now_timestamp="$(date +%s)"

while IFS= read -r entry; do
  [ -z "$entry" ] && continue

  entry_path="$(echo "$entry" | grep -Eo '^[^:]+')"

  if [[ "$(to_lower_case "$entry_path")" =~ "$(to_lower_case "$input_path")" ]]; then
    timestamps="$(echo "$entry" | grep -Eo '[^:]+$')"

    if [ -n "$VERBOSE" ]; then
      printf "match %s\n\n" "$entry_path"
    fi

    if [ ! -d "$entry_path" ]; then
      if [ -n "$VERBOSE" ]; then
        printf "%s doesn't exist anymore, removing...\n---\n" "$entry_path"
      fi
      entries="$(remove_from_history "$entries" "$entry_path")"
      continue
    fi

    get_frecency_points "$timestamps" "$now_timestamp"
    points=$CURRENT_POINTS

    if [ "$CURRENT_POINTS" -eq 0 ]; then
      if [ -n "$VERBOSE" ]; then
        printf "\n%s outdated, removing..." "$entry_path"
      fi
      entries="$(remove_from_history "$entries" "$entry_path")"
    else
      entries="$(replace_timestamps_for_entry "$entries" "$entry_path" "$CURRENT_TIMESTAMPS")"
    fi

    if [ -n "$VERBOSE" ]; then
      printf "\n---\n\n"
    fi

    if ((points > most_points_count)); then
      most_points_count=$points
      most_points_path=$entry_path
      most_points_timestamps="$CURRENT_TIMESTAMPS"
    fi
  fi
done < <(echo "$entries")

if [ -n "$most_points_path" ]; then
  if [ -n "$VERBOSE" ]; then
    printf "winning path: '%s'\n" "$most_points_path"
  fi

  if [ -d "$most_points_path" ]; then
    replace_timestamps_for_entry "$entries" "$most_points_path" "$most_points_timestamps$now_timestamp," > "$HISTORY_PATH"
    echo $most_points_path
    exit 0
  else
    echo "'$input_path' matched '$most_points_path' but could not find the directory. Unknown error (exit code $?)."
    echo "$entries" > "$HISTORY_PATH"
    exit 1
  fi
fi

echo "Could not find '$input_path'."

if [ -n "$VERBOSE" ]; then
  echo "'$input_path' is not a directory and no history matches for '$input_path'."
fi

echo "$entries" > "$HISTORY_PATH"
exit 1
