#!/bin/sh

_git_user='kvendrik'

_get_remote_url() {
  remote_name=$([ ! -z "$1" ] && echo "$1" || echo origin)
  remote_url="$(git config --get remote.${remote_name}.url)"
  echo $remote_url
}

_remote_url_to_web_url() {
  local base=$(echo "$remote_url" | sed -e "s/.git$//" -e "s/^git\@//" -e "s/\(.*[:/].*\)/\1/" -e "s/https\:\/\///" -e "s/\:/\//")
  echo "https://$base"
}

# Usage: opr [<base_branch>] [<remote_name>]
opr() {
  if ! git rev-parse --is-inside-work-tree &> /dev/null; then
    echo 'Not a git repository.'
    return
  fi
  local base_branch_name=$([ ! -z "$1" ] && echo "$1" || echo master)
  local pr_branch_name="$(git symbolic-ref --short HEAD)"
  local remote_url=$(_get_remote_url "$2")
  if [ -z "$remote_url" ]; then
    echo "Remote $2 does not exist."
    return
  fi
  local repository_web_url=$(_remote_url_to_web_url "$remote_url")
  open "$repository_web_url/compare/$base_branch_name...$pr_branch_name"
}

# Usage: mpr [<remote_name>]
mpr() {
  if ! git rev-parse --is-inside-work-tree &> /dev/null; then
    echo 'Not a git repository.'
    return
  fi
  local remote_url=$(_get_remote_url "$1")
  if [ -z "$remote_url" ]; then
    echo "Remote $1 does not exist."
    return
  fi
  local repository_web_url="$(_remote_url_to_web_url "$remote_url")"
  open "$repository_web_url/pulls/$_git_user"
}

# Usage: mi [<remote_name>]
mi() {
  if ! git rev-parse --is-inside-work-tree &> /dev/null; then
    echo 'Not a git repository.'
    return
  fi
  local remote_url=$(_get_remote_url "$1")
  if [ -z "$remote_url" ]; then
    echo "Remote $1 does not exist."
    return
  fi
  local repository_web_url="$(_remote_url_to_web_url "$remote_url")"
  open "$repository_web_url/issues/created_by/$_git_user"
}
