#!/usr/bin/env bash

function git_current_branch() {
  echo "$(git branch | grep \* | cut -d ' ' -f2)"
}

function git_current_repo_name() {
  echo -e $(basename `git rev-parse --show-toplevel`)
}

function git_check_uncommited_changes() {
  echo $(git diff-index --quiet HEAD -- || echo "uncommited changes found")
}

function get_http_status_code() {
  echo "$(curl -I $1 | grep -Eo "Status\: \d+" | grep -Eo "\d+")"
}

function ub() {
  branch="$(git symbolic-ref --short -q HEAD)"
  base_branch='master'
  if [ "$1" != "" ]; then
    base_branch="$1"
  fi
  git fetch origin $base_branch
  git merge $base_branch
}

function gccd(){
  if [[ -z "$2" ]]; then
    folder_name="$(basename $1 | sed -e 's/\.git//g')"
  else
    folder_name="$2"
  fi
  git clone $1 && cd $folder_name
}

function ntp() {
  if [ "$1" != "" ]; then
    netstat -vanp tcp | grep $1
  else
    netstat -vanp tcp
  fi
}

function create-app() {
  if [[ -z "$1" ]] || [[ -z "$2" ]]; then
    echo 'Usage: create-app <template_name> <app_name>'
    return
  fi

  status_code="$(get_http_status_code "https://github.com/kvendrik/project-template-$1")"

  if [ "$status_code" -eq "404" ]; then
    echo "Project template '$1' does not exist"
    return
  fi

  if [ "$status_code" != "200" ]; then
    echo "Something went wrong. Make sure you have an internet connection."
    return
  fi

  if ! git clone "git@github.com:kvendrik/project-template-$1.git" $2; then
    return
  fi

  cd $2
  rm -rf .git
  rm README.md
  yarn install
}

function reset-branch() {
  branch_name="$(git_current_branch)"

  echo -n "This will do a hard reset on your current branch ($branch_name). Continue? [y/N] "
  read do_reset

  if [ "$do_reset" != "y" ]; then
    return
  fi

  git checkout master
  git branch -D $branch_name
  git fetch origin $branch_name
  git checkout $branch_name
}

function polaris-tophat() {
  if [[ -z "$1" ]]; then
    echo 'Usage: polaris-tophat <branch_name>'
    return
  fi

  rps
  cd polaris-react

  if [ "$(git_current_repo_name)" != "polaris-react" ]; then
    echo 'Could not switch to polaris-react folder'
    return
  fi

  if [ "$(git_check_uncommited_changes)" != "" ]; then
    echo 'Uncommited changes found. Please commit/stash those first.'
    return
  fi

  git fetch origin $1
  gco $1

  code playground/Playground.tsx
  yarn dev
}

function gifify() {
  if [[ -n "$1" ]]; then
    if [[ $2 == '--good' ]]; then
      ffmpeg -i $1 -r 10 -vcodec png out-static-%05d.png
      time convert -verbose +dither -layers Optimize -resize 600x600\> out-static*.png  GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > $1.gif
      rm out-static*.png
    else
      ffmpeg -i $1 -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > $1.gif
    fi
  else
    echo "proper usage: gifify <input_movie.mov>. You DO need to include extension."
  fi
}
