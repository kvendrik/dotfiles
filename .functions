#!/usr/bin/env bash

function git_current_branch() {
  echo "$(git branch | grep \* | cut -d ' ' -f2)"
}

function git_current_repo_name() {
  echo -e $(basename `git rev-parse --show-toplevel`)
}

function git_check_uncommited_changes() {
  echo $(git diff-index --quiet HEAD -- || echo "uncommited changes found")
}

function get_http_status_code() {
  echo "$(curl -I $1 | grep -Eo "Status\: \d+" | grep -Eo "\d+")"
}

function git_branch_exists() {
  echo "$(git branch | grep $1)"
}

function ub() {
  # Merges the latest given branch (origin/master by default) into the current branch
  # Usage: ub [<remote_name>] [<branch_name>]
  branch="$(git symbolic-ref --short -q HEAD)"
  remote_name='origin'
  base_branch='master'
  if [ "$1" != "" ]; then
    remote_name="$1"
  fi
  if [ "$2" != "" ]; then
    base_branch="$2"
  fi
  git fetch $remote_name $base_branch
  git merge $remote_name/$base_branch
}

function gccd(){
  local verbose=false
  local first_log=true

  local print_help() {
    echo 'Usage: gccd <ssh_url_or_repo_name> [<folder_name>] [-v|--verbose]'
  }

  local function log() {
    if [[ "$verbose" == true && $first_log == false ]]; then
      echo "\n$1"
    else
      echo $1
    fi
    first_log=false
  }

  local function git_clone() {
    if [[ "$verbose" == true ]]; then
      git clone $1 $2
    else
      git clone $1 $2 &> /dev/null
    fi
  }

  if [[ -z "$1" ]]; then
    print_help
    return
  fi

  if [[ "$2" == '-v' || "$2" == '--verbose' ]]; then
    echo 'Verbose flag has to be the third argument'
    print_help
    return
  fi

  if [[ "$3" == '-v' || "$3" == '--verbose' ]]; then
    verbose=true
  fi

  if [[ $1 =~ ^git@ ]]; then
    if [[ -z "$2" ]]; then
      folder_name="$(basename $1 | sed -e 's/\.git//g')"
    else
      folder_name="$2"
    fi

    git_clone $1 $folder_name && cd $folder_name
    return
  fi

  if [[ -z "$2" ]]; then
    folder_name="$1"
  else
    folder_name="$2"
  fi

  local clone_url="git@github.com:$GITHUB_ORG_USERNAME/$1.git"
  log "Trying $clone_url. Cloning into $folder_name."

  if git_clone $clone_url $folder_name; then
    cd $folder_name
    return
  fi

  local clone_url="git@github.com:$GITHUB_USERNAME/$1.git"
  log "Trying $clone_url. Cloning into $folder_name."

  if git_clone $clone_url $folder_name; then
    cd $folder_name
    return
  fi

  log "$1 could not be found"
}

function ntp() {
  if [ "$1" != "" ]; then
    netstat -vanp tcp | grep $1
  else
    netstat -vanp tcp
  fi
}

function kill_port() {
  if [[ -z "$1" ]]; then
    echo 'Usage: kill_port <port>'
    return
  fi

  match="$(netstat -vanp tcp | grep -Ei "192\.168\.\d+\.\d+\.$1" | grep -Ei '\s\d{2,5}[^\.0-9]')"

  if [[ -z "$match" ]]; then
    echo "No netstat processes found for $1. Try running 'ntp $1' to manually check for processes matching $1."
    return
  fi

  pid="$(echo $match | grep -Eio -m 1 '\s\d{2,5}[^\.0-9]' | tr -d ' ')"

  echo "Found the following matches:\n$match\n"

  echo -n "Are you sure you would like to kill pid id $pid? [y/N] "
  read do_kill_pid

  if [ "$do_kill_pid" != "y" ]; then
    return
  fi

  kill $pid
}

function create-app() {
  if [[ -z "$1" ]] || [[ -z "$2" ]]; then
    echo 'Usage: create-app <template_name> <app_name>'
    return
  fi

  status_code="$(get_http_status_code "https://github.com/$GITHUB_USERNAME/project-template-$1")"

  if [ "$status_code" -eq "404" ]; then
    echo "Project template '$1' does not exist"
    return
  fi

  if [ "$status_code" != "200" ]; then
    echo "Something went wrong. Make sure you have an internet connection."
    return
  fi

  if ! git clone "git@github.com:$GITHUB_USERNAME/project-template-$1.git" $2; then
    return
  fi

  cd $2
  rm -rf .git
  rm README.md
  yarn install
}

function reset-branch() {
  branch_name="$(git_current_branch)"

  if [ "$(git_check_uncommited_changes)" != "" ]; then
    echo 'Uncommited changes found. Please commit/stash those first.'
    return
  fi

  echo -n "This will do a hard reset on your current branch ($branch_name). Continue? [y/N] "
  read do_reset

  if [ "$do_reset" != "y" ]; then
    return
  fi

  git checkout master
  git branch -D $branch_name
  git fetch origin $branch_name
  git checkout $branch_name
}

function polaris-tophat() {
  if [[ -z "$1" ]]; then
    echo 'Usage: polaris-tophat <branch_name>'
    return
  fi

  rps
  cd polaris-react

  if [ "$(git_current_repo_name)" != "polaris-react" ]; then
    echo 'Could not switch to polaris-react folder'
    return
  fi

  if [ "$(git_check_uncommited_changes)" != "" ]; then
    echo 'Uncommited changes found. Please commit/stash those first.'
    return
  fi

  nvm use 10.11.0

  if [ "$(git_branch_exists $1)" -eq "" ]; then
    git fetch origin $1
  fi

  gco $1
  git pull

  code playground/Playground.tsx
  yarn
  yarn dev
}

function mcd() {
  mkdir $1 && cd $_
}

function gifify() {
  if [[ -n "$1" ]]; then
    if [[ $2 == '--good' ]]; then
      ffmpeg -i $1 -r 10 -vcodec png out-static-%05d.png
      time convert -verbose +dither -layers Optimize -resize 600x600\> out-static*.png  GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > $1.gif
      rm out-static*.png
    else
      ffmpeg -i $1 -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > $1.gif
    fi
  else
    echo "proper usage: gifify <input_movie.mov>. You DO need to include extension."
  fi
}
